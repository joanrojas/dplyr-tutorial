MSFT = dnorm(x_vals, mean = 0.05, sd = 0.1)
SBUX = dnorm(x_vals, mean = 0.025, sd = 0.05)
plot(x_vals, MSFT, type = "l", col = "blue", ylab = "Normal curves",
ylim = c(0, 8))
# Add a normal curve for SBUX
lines(x_vals, SBUX, col = "red")
# Add a plot legend
legend("topleft", legend = c("Microsoft", "Starbucks"),
col = c("blue", "red"), lty = 1)
t risk for microsoft
mu_R = 0.04
sigma_R = 0.09
# Initial wealth $100,000
W0 = 100000
# 1% value-at-risk
W0 * qnorm(0.01, mean = mu_R, sd = sigma_R)
# 5% value-at-risk
W0 * qnorm(0.05, mean = mu_R, sd = sigma_R)
#Amazon and Costo
# Vectors of prices
PA = c(38.23, 41.29)
PC = c(41.11, 41.74)
# Simple monthly returns
RA = (PA[2] - PA[1]) / PA[1]
RC = (PC[2] - PC[1]) / PC[1]
#Compound monthly returns
rA= log(PA[1])-log(PA[2])
rC=log(PC[1])-log(PC[2])
rA
rC
#Compound monthly returns
rA= log(PA[2])-log(PA[1])
rC=log(PC[2])-log(PC[1])
rA
RA
#RA simple monthly return
RA_annual = (1 + RA)^12 - 1
# The simple returns on Amazon (RA) and Costco (RC) are still in your workspace
# Portfolio shares
xA = 8000 / 10000
xC = 1 - xA
# Simple monthly return
xA * RA + xC * RC
xA
install.packages(c("aemo", "e1071"))
install.packages("Amelia")
.libPaths()
install.packages("car")
install.packages("caret")
install.packages("cluster")
install.packages("forecast")
install.packages("lubridate")
data <- read.csv(url="http://www.quandl.com/api/v1/datasets/GOOGLEORG/FLUCOUNTRY.csv?trim_start=2002-12-29&trim_end=2014-08-31&collapse=weekly", header = TRUE)
data <- read.csv("http://www.quandl.com/api/v1/datasets/GOOGLEORG/FLUCOUNTRY.csv?trim_start=2002-12-29&trim_end=2014-08-31&collapse=weekly", header = TRUE)
help(read.csv)
data <- read.csv("http://www.quandl.com/api/v1/datasets/GOOGLEORG/FLUCOUNTRY.csv?trim_start=2002-12-29&trim_end=2014-08-31&collapse=weekly", header = TRUE, na.strings = "NA", stringsAsFactors = FALSE)
names(flu_data)
flu_data <- read.csv("http://www.quandl.com/api/v1/datasets/GOOGLEORG/FLUCOUNTRY.csv?trim_start=2002-12-29&trim_end=2014-08-31&collapse=weekly", header = TRUE, na.strings = "NA", stringsAsFactors = FALSE)
names(flu_data)
head(flu_data)
countries <- setdiff(colnames(flu_data), "rgroup")
countries
countries <- setdiff(colnames(flu_data), "Date")
countries
length(countries)
class(head(flu_data$Date))
help(as.Date)
flu_data$Date <- as.Date(flu_data$Date)
class(as.Date("2014-08-31"))
flu_data$Date <- as.Date(flu_data$Date, "%Y-%m-%d")
par(mfrow=c(1,1))
ylab='Cases / Week', type='l', col='blue') #what plotted?
plot(rawFluData$Canada ~ rawFluData$Date, main="Flu Trends Compared", xlab='Time',ylab='Cases / Week', type='l', col='blue') #what plotted?
plot(flu_data$Canada ~ flu_data$Date, main="Flu Trends Compared", xlab='Time',ylab='Cases / Week', type='l', col='blue') #what plotted?
head(countries)
countries
lines(flu_data$South.Africa ~ flu_data$Date, xlab='Time',ylab='Cases / Week', type='l', col='blue') #what plotted?
lines(flu_data$South.Africa ~ flu_data$Date, xlab='Time',ylab='Cases / Week', type='l', col='green') #what plotted?
lines(flu_data$Austria ~ flu_data$Date, xlab='Time',ylab='Cases / Week', type='l', col='red') #what plotted?
help(legend)
legend("topleft", c("Canada","South Africa","Austria"), col = c("blue","green","red"))
help(legend)
legend("topleft", c("Canada","South Africa","Austria"), col = c("blue","green","red"), lty = 1)
legend("topleft", c("Canada","South Africa","Austria"), col = c("blue","green","red"), lty = 1, bty = 1)
legend("topleft", c("Canada","South Africa","Austria"), col = c("blue","green","red"), lty = 1, bty = '1')
help(legend)
legend("topleft", c("Canada","South Africa","Austria"), col = c("blue","green","red"), lty = 1, bty = '1', cex= 1.25)
legend("topleft", c("Canada","South Africa","Austria"), col = c("blue","green","red"), lty = 1, bty = '1', cex= 1.25,  box.lwd = 1.2, box.col = "black")
missmap(flu_data)
library("Amelia", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
missmap(flu_data)
help(lapply)
help(apply)
detect <- function(x) {
sum(is.na(x))
}
apply(flu_data, MARGIN = 1 , detect)
missingCount = apply(flu_data, MARGIN = 1 , detect)
sum(c(TRUE))
install.packages("Quandl")
Quandl.auth("1Xu7txG5xSDKEA36BedE")
library("Quandl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
Quandl.auth("1Xu7txG5xSDKEA36BedE")
search()
# Using search() in a new R session says that these packages are
# loaded by default:
# "package:stats"     "package:graphics"
# "package:grDevices" "package:utils"     "package:datasets"
# "package:methods"   "package:base"
# Others that are useful:
# gplots
# ggplot2, reshape, plyr
showPackageContents <- function (packageName) {
# Get a list of things contained in a particular package
funlist <- objects(packageName)
# Remove things that don't start with a letter
idx <- grep('^[a-zA-Z][a-zA-Z0-9._]*', funlist)
funlist <- funlist[idx]
# Remove things that contain arrow <-
idx <- grep('<-', funlist)
if (length(idx)!=0)
funlist <- funlist[-idx]
# Make a data frame to keep track of status
objectlist <- data.frame(name=funlist,
primitive=FALSE,
func=FALSE,
object=FALSE,
constant=FALSE,
stringsAsFactors=F)
for (i in 1:nrow(objectlist)) {
fname <- objectlist$name[i]
if (exists(fname)) {
obj <- get(fname)
if (is.primitive(obj)) {
objectlist$primitive[i] <- TRUE
}
if (is.function(obj)) {
objectlist$func[i] <- TRUE
}
if (is.object(obj)) {
objectlist$object[i] <- TRUE
}
# I think these are generally constants
if (is.vector(obj)) {
objectlist$constant[i] <- TRUE
}
}
}
cat(packageName)
cat("\n================================================\n")
cat("Primitive functions: \n")
cat(objectlist$name[objectlist$primitive])
cat("\n")
cat("\n================================================\n")
cat("Non-primitive functions: \n")
cat(objectlist$name[objectlist$func  &  !objectlist$primitive])
cat("\n")
cat("\n================================================\n")
cat("Constants: \n")
cat(objectlist$name[objectlist$constant])
cat("\n")
cat("\n================================================\n")
cat("Objects: \n")
cat(objectlist$name[objectlist$object])
cat("\n")
}
showPackageContents("package:Amelia")
search()
library("Amelia", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
search()
showPackageContents("package:Amelia")
help(AmeliaView)
showPackageContents("package:dplyr")
install.packages("dplyr")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
showPackageContents("package:dplyr")
help(dplyr)
dir()
setwd("SHINY_APP_PATH")
getwd)
getwd()
?library()
library("ggvis")
setwd("~/Dropbox/GitHub/dplyr-tutorial")
shiny::runApp('dplyr_app')
flights %>% group_by(dest) %>% summarise(dep_d = mean(dep_delay, na.rm= TRUE)) %>% arrange(desc(dep_d))
source('~/Dropbox/GitHub/dplyr-tutorial/tutorial_dplyr.R', echo=TRUE)
plane_delay %>%
filter(n >50) %>%
ggplot(aes(y = delay, x = year)) + geom_point() + geom_smooth() + xlim(1980,2015 )
tal number of flights. And the evolution
flights %>%
group_by(date) %>%
arrange(desc(date)) %>%
summarise(number_of_flights = as.numeric(n())) %>%
mutate(slag = number_of_flights - lag(number_of_flights)) %>%
ggplot(aes(x = date, y = slag)) + geom_line()
atterplot
flights %>%
group_by(carrier) %>%
summarise_each(funs(mean(., na.rm = TRUE)), matches("delay")) %>%
ggplot(aes(x= arr_delay, y= dep_delay, color = carrier)) +
geom_point()
flights %>%
mutate(time_of_day = hour + minute/60) %>%
group_by(time_of_day) %>%
summarise(dep_delay = mean(dep_delay, na.rm= TRUE), n = n()) %>%
arrange(desc(dep_delay)) %>%
filter(n >50) %>%
ggplot(aes(x = time_of_day , y = dep_delay, size = n)) +
geom_point() +
scale_size_area()
atterplot
flights %>%
group_by(carrier) %>%
summarise_each(funs(mean(., na.rm = TRUE)), matches("delay")) %>%
ggplot(aes(x= arr_delay, y= dep_delay, color = carrier)) +
geom_point()
flights %>%
group_by(carrier) %>%
mutate(is_delayed = dep_delay >= 0, is_arr_delayed = arr_delay >= 0  ) %>%
summarise(me_delay = mean(is_delayed, na.rm = TRUE),
me_arr_delay = mean(is_arr_delayed, na.rm = TRUE),me_canc = mean(cancelled, na.rm = TRUE)
, n = n ()) %>%
filter(n >2500) %>%
ggplot(aes(x = carrier, y = me_delay, size= n )) + geom_point() + scale_size_area()
flights %>%
group_by(date) %>%
arrange(desc(date)) %>%
summarise(number_of_flights = as.numeric(n())) %>%
mutate(slag = number_of_flights - lag(number_of_flights)) %>%
ggplot(aes(x = date, y = slag)) + geom_line()
ghest average delays?
flights %>%
group_by(dest) %>%
summarise(average_delay = mean(arr_delay, na.rm = TRUE)) %>%
arrange(desc(average_delay))
ighest average delays?
flights %>%
group_by(dest) %>%
summarise(average_delay = mean(arr_delay, na.rm = TRUE), n = n()) %>%
arrange(desc(average_delay))
flights %>%
group_by(dest) %>%
summarise(average_delay = mean(arr_delay, na.rm = TRUE), n = n()) %>%
arrange(desc(average_delay)) %>%
ggplot(aes(x = dest, y = average_delay, size = n)) + geom_point() + scale_size_area()
flights %>%
group_by(dest) %>%
summarise(average_delay = mean(arr_delay, na.rm = TRUE), n = n()) %>%
arrange(desc(average_delay)) %>%
ggplot(aes(x = average_delay, y = dest, size = n)) + geom_point() + scale_size_area()
flights %>%
group_by(dest) %>%
summarise(average_delay = mean(arr_delay, na.rm = TRUE), n = n()) %>%
select( n> 2000) %>%
arrange(desc(average_delay)) %>%
ggplot(aes(x = average_delay, y = dest, size = n)) + geom_point() + scale_size_area()
#Which destinations have the highest average delays?
flights %>%
group_by(dest) %>%
summarise(average_delay = mean(arr_delay, na.rm = TRUE), n = n()) %>%
select( n> 2000) %>%
arrange(desc(average_delay)) %>%
ggplot(aes(x = average_delay, y = dest, size = n)) + geom_point() + scale_size_area()
#Which destinations have the highest average delays?
flights %>%
group_by(dest) %>%
summarise(average_delay = mean(arr_delay, na.rm = TRUE), n = n()) %>%
filter( n> 2000) %>%
arrange(desc(average_delay)) %>%
ggplot(aes(x = average_delay, y = dest, size = n)) + geom_point() + scale_size_area()
How do delays vary on the course of the day?
flights %>%
filter(cancelled =="0") %>%
group_by(hour,minute) %>%
summarise(avg_delay = mean(dep_delay, na.rm = TRUE))
s evolve during the day?
flights %>%
mutate(time_of_day = hour + minute/60) %>%
group_by(time_of_day) %>%
summarise(dep_delay = mean(dep_delay, na.rm= TRUE), n = n()) %>%
arrange(desc(dep_delay)) %>%
filter(n >50) %>%
ggplot(aes(x = time_of_day , y = dep_delay, size = n)) +
geom_point() +
scale_size_area()
flights %>%
group_by(dest) %>%
summarise(average_delay = mean(arr_delay, na.rm = TRUE), n = n()) %>%
filter( n> 2000) %>%
arrange(desc(average_delay)) %>%
ggplot(aes(x = average_delay, y = dest, size = n)) + geom_point() + scale_size_area()
ions have the highest average delays?
flights %>%
group_by(dest) %>%
summarise(average_delay = mean(arr_delay, na.rm = TRUE), n = n()) %>%
filter( n > 3000) %>%
arrange(desc(average_delay)) %>%
ggplot(aes(x = average_delay, y = dest, size = n)) + geom_point() + scale_size_area()
?sliderInput
shiny::runApp('dplyr_app')
shiny::runApp('dplyr_app')
delays?
flights %>%
group_by(dest) %>%
summarise(average_delay = mean(arr_delay, na.rm = TRUE), n = n()) %>%
filter( n > 3000) %>%
arrange(desc(average_delay)) %>%
ggplot(aes(x = average_delay, y = dest, size = n)) + geom_point() + scale_size_area()
source('~/Dropbox/GitHub/dplyr-tutorial/tutorial_dplyr.R', echo=TRUE)
flights %>%
group_by(date) %>%
arrange(desc(date)) %>%
summarise(number_of_flights = as.numeric(n())) %>%
mutate(slag = number_of_flights - lag(number_of_flights)) %>%
ggplot(aes(x = date, y = slag)) + geom_line()
flights %>%
group_by(dest) %>%
summarise(average_delay = mean(arr_delay, na.rm = TRUE), n = n()) %>%
filter( n > 3000) %>%
arrange(desc(average_delay)) %>%
ggplot(aes(x = average_delay, y = dest, size = n)) + geom_point() + scale_size_area()
shiny::runApp('dplyr_app')
shiny::runApp('dplyr_app')
shiny::runApp('dplyr_app')
flights %>%
mutate(time_of_day = hour + minute/60) %>%
group_by(time_of_day) %>%
summarise(dep_delay = mean(dep_delay, na.rm= TRUE), n = n()) %>%
arrange(desc(dep_delay)) %>%
filter(n >50) %>%
ggplot(aes(x = time_of_day , y = dep_delay, size = n)) +
geom_point() +
scale_size_area()
flights$carrier
flights %>%
mutate(unique_carrier = unique(carrier)) %>%
select(unique_carrier)
flights %>%
mutate(unique_carrier = unique(carrier))
flights %>%
select(unique(carrier))
unique(flights$carrier)
flights %>%
unique(select(carrier))
unique(flights$dest)
flights %>%
select(carrier)
unique(select(flights,carrier)
unique(select(flights,carrier))
flights %>%
unique(carrier)
flights %>%
select(b = unique(carrier))
unique(select(flights,carrier))
shiny::runApp('dplyr_app')
flights %>%
group_by(dest) %>%
summarise(average_arr_delay = mean(arr_delay, na.rm = TRUE), average_dep_delay =
mean(dep_delay, na.rm =TRUE), n()) %>%
filter( n > 3000) %>%
arrange(desc(average_delay)) %>%
ggplot(aes(x = average_delay, y = dest, size = average_dep_delay))
+ geom_point() + scale_size_area()
flights %>%
group_by(dest) %>%
summarise(average_arr_delay = mean(arr_delay, na.rm = TRUE), average_dep_delay =
mean(dep_delay, na.rm =TRUE), n()) %>%
filter( n > 3000) %>%
arrange(desc(average_delay)) %>%
ggplot(aes(x = average_delay, y = dest, size = average_dep_delay)) +
geom_point() + scale_size_area()
flights %>%
group_by(dest) %>%
summarise(average_arr_delay = mean(arr_delay, na.rm = TRUE), average_dep_delay =
mean(dep_delay, na.rm =TRUE), n()) %>%
filter( n > 3000) %>%
arrange(desc(average_delay)) %>%
ggplot(aes(x = average_delay, y = dest, color = average_dep_delay)) +
geom_point()
flights %>%
group_by(dest) %>%
summarise(average_arr_delay = mean(arr_delay, na.rm = TRUE), average_dep_delay =
mean(dep_delay, na.rm =TRUE), n()) %>%
filter( n > 3000) %>%
ggplot(aes(x = average_delay, y = dest, color = average_dep_delay)) +
geom_point()
flights %>%
group_by(dest) %>%
summarise(average_arr_delay = mean(arr_delay, na.rm = TRUE), average_dep_delay =
mean(dep_delay, na.rm =TRUE), n()) %>%
filter( n > 3000) %>%
ggplot(aes(x = average_delay, y = dest, color = average_dep_delay)) +
geom_point()
flights %>%
group_by(dest) %>%
summarise(average_arr_delay = mean(arr_delay, na.rm = TRUE), average_dep_delay =
mean(dep_delay, na.rm =TRUE), n()) %>%
filter( n > 3000)
flights %>%
group_by(dest) %>%
summarise(average_arr_delay = mean(arr_delay, na.rm = TRUE), average_dep_delay =
mean(dep_delay, na.rm =TRUE), n = n()) %>%
filter( n > 3000)
tions have the highest average arr_delays and dep_delay?
flights %>%
group_by(dest) %>%
summarise(average_arr_delay = mean(arr_delay, na.rm = TRUE), average_dep_delay =
mean(dep_delay, na.rm =TRUE), n = n()) %>%
filter( n > 3000) %>%
ggplot(aes(x = average_delay, y = dest, color = average_dep_delay)) +
geom_point()
tions have the highest average arr_delays and dep_delay?
flights %>%
group_by(dest) %>%
summarise(average_arr_delay = mean(arr_delay, na.rm = TRUE), average_dep_delay =
mean(dep_delay, na.rm =TRUE), n = n()) %>%
filter( n > 3000) %>%
ggplot(aes(x = average_arr_delay, y = dest, color = average_dep_delay)) +
geom_point()
tions have the highest average arr_delays and dep_delay?
flights %>%
group_by(dest) %>%
summarise(average_arr_delay = mean(arr_delay, na.rm = TRUE), average_dep_delay =
mean(dep_delay, na.rm =TRUE), n = n()) %>%
filter( n > 3000) %>%
ggplot(aes(x = average_arr_delay, y = dest, size  = average_dep_delay)) +
geom_point()
shiny::runApp('dplyr_app')
flights
tions have the highest average arr_delays and dep_delay?
flights %>%
group_by(dest) %>%
summarise(average_arr_delay = mean(arr_delay, na.rm = TRUE), average_dep_delay =
mean(dep_delay, na.rm =TRUE), n = n()) %>%
filter( n > 3000) %>%
ggplot(aes(x = average_arr_delay, y = dest, size  = average_dep_delay, color = time)) +
geom_point()
flights %>%
group_by(dest) %>%
summarise(average_arr_delay = mean(arr_delay, na.rm = TRUE), average_dep_delay =
mean(dep_delay, na.rm =TRUE), n = n()) %>%
filter( n > 3000)
flights %>%
group_by(dest) %>%
summarise(average_arr_delay = mean(arr_delay, na.rm = TRUE), average_dep_delay =
mean(dep_delay, na.rm =TRUE), n = n(), tim = mean(time, na.rm = TRUE)) %>%
filter( n > 3000)
flights %>%
group_by(dest) %>%
summarise(average_arr_delay = mean(arr_delay, na.rm = TRUE), average_dep_delay =
mean(dep_delay, na.rm =TRUE), n = n(), tim = mean(time, na.rm = TRUE)) %>%
filter( n > 3000) %>%
ggplot(aes(x = average_arr_delay, y = dest, size  = average_dep_delay, color = tim)) +
geom_point()
shiny::runApp('dplyr_app')
shiny::runApp('dplyr_app')
shiny::runApp('dplyr_app')
flights %>%
group_by(carrier, dest) %>%
summarise(average_arr_delay = mean(arr_delay, na.rm = TRUE), average_dep_delay =
mean(dep_delay, na.rm =TRUE), n = n(), tim = mean(time, na.rm = TRUE)) %>%
filter( n > 3000) %>%
ggplot(aes(x = average_arr_delay, y = dest, size  = average_dep_delay, color = tim)) +
geom_point()
flights %>%
group_by(carrier, dest) %>%
summarise(average_arr_delay = mean(arr_delay, na.rm = TRUE), average_dep_delay =
mean(dep_delay, na.rm =TRUE), n = n(), tim = mean(time, na.rm = TRUE)) %>%
filter( n > 3000)
flights %>%
group_by(carrier, dest) %>%
summarise(average_arr_delay = mean(arr_delay, na.rm = TRUE), average_dep_delay =
mean(dep_delay, na.rm =TRUE), n = n(), tim = mean(time, na.rm = TRUE)) %>%
filter( n > 3000, carrier = "CO")
flights %>%
group_by(carrier, dest) %>%
summarise(average_arr_delay = mean(arr_delay, na.rm = TRUE), average_dep_delay =
mean(dep_delay, na.rm =TRUE), n = n(), tim = mean(time, na.rm = TRUE)) %>%
filter( n > 3000, carrier == "CO")
levels(flights$carrier)
unique(flights$carrier)
shiny::runApp('dplyr_app')
shiny::runApp('dplyr_app')
shiny::runApp('dplyr_app')
#Which destinations have the highest average arr_delays and dep_delay?
flights %>%
group_by(carrier, dest) %>%
summarise(average_arr_delay = mean(arr_delay, na.rm = TRUE), average_dep_delay =
mean(dep_delay, na.rm =TRUE), n = n(), tim = mean(time, na.rm = TRUE)) %>%
filter( n > 3000, carrier == "CO")
shiny::runApp('dplyr_app')
shiny::runApp('dplyr_app')
shiny::runApp('dplyr_app')
c()
d()
shiny::runApp('dplyr_app')
shiny::runApp('dplyr_app')
age arr_delays and dep_delay?
flights %>%
group_by(carrier, dest) %>%
summarise(average_arr_delay = mean(arr_delay, na.rm = TRUE), average_dep_delay =
mean(dep_delay, na.rm =TRUE), n = n(), tim = mean(time, na.rm = TRUE)) %>%
filter( n > 3000, carrier %in% c("UA"))
age arr_delays and dep_delay?
flights %>%
group_by(carrier, dest) %>%
summarise(average_arr_delay = mean(arr_delay, na.rm = TRUE), average_dep_delay =
mean(dep_delay, na.rm =TRUE), n = n(), tim = mean(time, na.rm = TRUE)) %>%
filter(carrier %in% c("UA"))
shiny::runApp('dplyr_app')
